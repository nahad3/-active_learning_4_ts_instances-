total_train_points : 100
Query selection method: InfoNN
Run number: 0
F1 score at the end of round 0 : 0.5181840054533364
Acc score at the end of round 0 : 0.5747222222222222
Dist std: 38.285667419433594
mu: 237.900634765625
Traceback (most recent call last):
  File "/home/namrata/.pycharm_helpers/pydev/pydevd.py", line 1483, in _exec
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "/home/namrata/.pycharm_helpers/pydev/_pydev_imps/_pydev_execfile.py", line 18, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "/home/namrata/Dropbox (GaTech)/-active_learning_4_ts_instances-/main_run.py", line 189, in <module>
    f1_score_list,acc_list,_ = train_active_loop(model_feats=model_feats, device=device, args=args, model_clfr=model_clfr,
  File "/home/namrata/Dropbox (GaTech)/-active_learning_4_ts_instances-/active_learning_loop.py", line 391, in train_active_loop
    temp = mutual_information(device, candidate_queries[i], num_samples, dist_std, mu)
  File "/home/namrata/Dropbox (GaTech)/-active_learning_4_ts_instances-/active_learning_loop.py", line 599, in mutual_information
    distances.append(torch.abs(torch.normal(mean, dist_std, size)))
TypeError: normal() received an invalid combination of arguments - got (Tensor, Tensor, tuple), but expected one of:
 * (Tensor mean, Tensor std, *, torch.Generator generator, Tensor out)
 * (Tensor mean, float std, *, torch.Generator generator, Tensor out)
 * (float mean, Tensor std, *, torch.Generator generator, Tensor out)
 * (float mean, float std, tuple of ints size, *, torch.Generator generator, Tensor out, torch.dtype dtype, torch.layout layout, torch.device device, bool pin_memory, bool requires_grad)
torch.Size([17980, 5])